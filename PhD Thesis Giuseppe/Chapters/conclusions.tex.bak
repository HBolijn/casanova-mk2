% todo: add references

The growing diffusion of video-games in the last decade means that games are now as widespread as movies and pop-music, and in some cases even more.

Games are mainly aimed at the entertainment of users, but fun is not their exclusive aim. Games are also used in other, serious contexts that range from the defense industry, to education, scientific exploration, health care, emergency management, and many more. 

Making games though is an expensive activity. This, paired with the technical complexities of game development (physics, AI, rendering, networking, all in real-time on a variety of consumer grade hardware), means that games have difficulty in turning into profitable enterprises. This applies even more so to those kinds of games that by nature have less commercial appeal, such as indie, serious, and research games. This economic difficulty is the main reason behind the search for better targets for serious games such as the industries mentioned above.

Serious games are not the only ones facing such problems. Indie-games, which are those low-cost games (below the 10\$ mark, and sometimes even ad-based) often played in modern smartphones and tablets, share the same difficulties.

The costs associated with making games are indeed very high, no matter the games developed. Moreover, the costs for making a game are increasing as new generations of more powerful hardware unlock new possibilities such as real-time multiplayer games, advanced graphics, advanced physics, bigger environments, smart opponents and characters, and so on. This increase in costs seems to be exponential because of the increasing interactions between increasingly complex components of the game. For example, increasing the complexity of the physics system also increases the complexity of the AI which now must consider more aspects of the environment, even if the objective is only to achieve the same tasks as before.

The cost for making large scale games is very high as well, but as of now large studios seem to be ignoring the problem, largely by using brute-force efforts with great expenditure of resources. For this specific reason our work does not focus on AAA games, even though we argue that in the future it may be possible to apply our work there as well should AAA game developers reach a breaking-point in development costs that would force them to adopt less wasteful practices. Until that happens, though, we will focus exclusively on research, serious, and indie games.

The interest in game-development has already spurred the growth of substantial interest in research on principled design techniques and on cost-effective development technologies for game architectures. Our present endeavour makes a step along the directions of studying disciplined models for game development. The breadth of adoption of games means that a better understanding of them would have tangible benefits on all who build (or even use) games.

The general problem that we tackled in this work is the following: \textbf{games offer a unique blend of complexity, optimization, and need for customization by non-programmers; this makes games costly to build and maintain, and it also makes it hard but desirable to simplify the process of game development.}

The specific problem that we wish to solve then is that modern game development is done with game engines and traditional software engineering. The programming languages and techniques used for making games evolved far from the interaction needs of games and simulation. Instead, most modern programming languages used for making games were creating for representing and manipulating data that is transformed from some input into some output. Most computer programs are still related to the early models of computation, that is performing mathematical computations that require little to no user intervention. Interactivity is an aspect of computer programming that has emerged only in recent times. We argue that \textit{using languages and abstractions designed for the specific purpose of building games and interactive simulations in general, can reduce the difficulty and economical risks of making games}. We also argue that currently available tools and techniques have shaped an industry that is excessively risk averse and which cannot easily create games that are truly innovative in terms of gameplay, AI, story-telling, etc.

A proper language for making games should be: \textit{(i)} simple; \textit{(ii)} useful across all game development tasks; \textit{(iii)} general in that it does not constrain the kind of games that are built with it; and \textit{(iv)} fully composable, that is all reasonable combinations of its features should be possible.

The specific research questions that we propose to answer in this thesis are related to: \textit{(i)} identifying the common problems of game development; \textit{(ii)} identifying the common solutions to such problems; \textit{(iii)} defining a programming language that makes it simpler to implement such solutions; \textit{(iv)} evaluating such a programming language to find if it solves the original problems and to compare it to the commonly used tools and techniques. 

% todo: complete
% We indentified (i), by determining ...
% We discussed (ii), ...
% We showed (iii), the formal design, ...
% We evaluated (iv), with a mixture of feature-by-feature comparison, benchmarks, and user studies ...

% After this process, we believe that Cnv offers a new mindset for programming games that is closer to our way of dscribing them, and with less focus on the actual CPU execution ... We also have sufficient data to conclude that yes, Cnv is suitable for making games, and that it both requires less code and less effort to ...

We conclude with an observation. Creating a programming language is a controversial practice. In particular, there exist many research languages that have never seen any real commercial adoption, leading to the belief that research in language development may not be a useful activity. We argue that the purpose of such research (and ours as well) is not that of creating commercial tools for widespread usage. Rather, we look for the best practices already used by many and we try to formalize them in a clear setting, without additional idioms and constructs that, as much as they may be useful, would hamper our understanding of our object of study. Moreover, we do not just look for a language that solves the original problem, we look for the simplest such solution that remains expressive enough.

We motivate this goal with a quote from the great scientist Albert Einstein: "Everything should be made as simple as possible, but no simpler.".
